package com.studieux.bdd;

import com.studieux.bdd.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DEVOIR.
 */
public class Devoir {

    private Long id;
    /** Not-null value. */
    private String nom;
    private String description;
    /** Not-null value. */
    private java.util.Date deadline;
    private long matiereId;
    private Long noteId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DevoirDao myDao;

    private Matiere matiere;
    private Long matiere__resolvedKey;

    private Note note;
    private Long note__resolvedKey;


    public Devoir() {
    }

    public Devoir(Long id) {
        this.id = id;
    }

    public Devoir(Long id, String nom, String description, java.util.Date deadline, long matiereId, Long noteId) {
        this.id = id;
        this.nom = nom;
        this.description = description;
        this.deadline = deadline;
        this.matiereId = matiereId;
        this.noteId = noteId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDevoirDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNom() {
        return nom;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public java.util.Date getDeadline() {
        return deadline;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDeadline(java.util.Date deadline) {
        this.deadline = deadline;
    }

    public long getMatiereId() {
        return matiereId;
    }

    public void setMatiereId(long matiereId) {
        this.matiereId = matiereId;
    }

    public Long getNoteId() {
        return noteId;
    }

    public void setNoteId(Long noteId) {
        this.noteId = noteId;
    }

    /** To-one relationship, resolved on first access. */
    public Matiere getMatiere() {
        if (matiere__resolvedKey == null || !matiere__resolvedKey.equals(matiereId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatiereDao targetDao = daoSession.getMatiereDao();
            matiere = targetDao.load(matiereId);
            matiere__resolvedKey = matiereId;
        }
        return matiere;
    }

    public void setMatiere(Matiere matiere) {
        if (matiere == null) {
            throw new DaoException("To-one property 'matiereId' has not-null constraint; cannot set to-one to null");
        }
        this.matiere = matiere;
        matiereId = matiere.getId();
        matiere__resolvedKey = matiereId;
    }

    /** To-one relationship, resolved on first access. */
    public Note getNote() {
        if (note__resolvedKey == null || !note__resolvedKey.equals(noteId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteDao targetDao = daoSession.getNoteDao();
            note = targetDao.load(noteId);
            note__resolvedKey = noteId;
        }
        return note;
    }

    public void setNote(Note note) {
        this.note = note;
        noteId = note == null ? null : note.getId();
        note__resolvedKey = noteId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
