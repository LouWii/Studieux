package com.studieux.bdd;

import java.util.List;
import com.studieux.bdd.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PERIODE.
 */
public class Periode {

    private Long id;
    /** Not-null value. */
    private String nom;
    /** Not-null value. */
    private java.util.Date date_debut;
    /** Not-null value. */
    private java.util.Date date_fin;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PeriodeDao myDao;

    private List<Matiere> matiereList;

    public Periode() {
    }

    public Periode(Long id) {
        this.id = id;
    }

    public Periode(Long id, String nom, java.util.Date date_debut, java.util.Date date_fin) {
        this.id = id;
        this.nom = nom;
        this.date_debut = date_debut;
        this.date_fin = date_fin;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPeriodeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNom() {
        return nom;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNom(String nom) {
        this.nom = nom;
    }

    /** Not-null value. */
    public java.util.Date getDate_debut() {
        return date_debut;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate_debut(java.util.Date date_debut) {
        this.date_debut = date_debut;
    }

    /** Not-null value. */
    public java.util.Date getDate_fin() {
        return date_fin;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate_fin(java.util.Date date_fin) {
        this.date_fin = date_fin;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Matiere> getMatiereList() {
        if (matiereList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatiereDao targetDao = daoSession.getMatiereDao();
            matiereList = targetDao._queryPeriode_MatiereList(id);
        }
        return matiereList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMatiereList() {
        matiereList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
