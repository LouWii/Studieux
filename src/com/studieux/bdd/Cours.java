package com.studieux.bdd;

import com.studieux.bdd.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COURS.
 */
public class Cours {

    private Long id;
    /** Not-null value. */
    private String type;
    private int jour;
    private String salle;
    private Integer semaine;
    /** Not-null value. */
    private java.util.Date date_debut;
    /** Not-null value. */
    private java.util.Date date_fin;
    private long heure_debut;
    private long heure_fin;
    private long matiereId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CoursDao myDao;

    private Matiere matiere;
    private Long matiere__resolvedKey;


    public Cours() {
    }

    public Cours(Long id) {
        this.id = id;
    }

    public Cours(Long id, String type, int jour, String salle, Integer semaine, java.util.Date date_debut, java.util.Date date_fin, long heure_debut, long heure_fin, long matiereId) {
        this.id = id;
        this.type = type;
        this.jour = jour;
        this.salle = salle;
        this.semaine = semaine;
        this.date_debut = date_debut;
        this.date_fin = date_fin;
        this.heure_debut = heure_debut;
        this.heure_fin = heure_fin;
        this.matiereId = matiereId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCoursDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public int getJour() {
        return jour;
    }

    public void setJour(int jour) {
        this.jour = jour;
    }

    public String getSalle() {
        return salle;
    }

    public void setSalle(String salle) {
        this.salle = salle;
    }

    public Integer getSemaine() {
        return semaine;
    }

    public void setSemaine(Integer semaine) {
        this.semaine = semaine;
    }

    /** Not-null value. */
    public java.util.Date getDate_debut() {
        return date_debut;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate_debut(java.util.Date date_debut) {
        this.date_debut = date_debut;
    }

    /** Not-null value. */
    public java.util.Date getDate_fin() {
        return date_fin;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate_fin(java.util.Date date_fin) {
        this.date_fin = date_fin;
    }

    public long getHeure_debut() {
        return heure_debut;
    }

    public void setHeure_debut(long heure_debut) {
        this.heure_debut = heure_debut;
    }

    public long getHeure_fin() {
        return heure_fin;
    }

    public void setHeure_fin(long heure_fin) {
        this.heure_fin = heure_fin;
    }

    public long getMatiereId() {
        return matiereId;
    }

    public void setMatiereId(long matiereId) {
        this.matiereId = matiereId;
    }

    /** To-one relationship, resolved on first access. */
    public Matiere getMatiere() {
        if (matiere__resolvedKey == null || !matiere__resolvedKey.equals(matiereId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatiereDao targetDao = daoSession.getMatiereDao();
            matiere = targetDao.load(matiereId);
            matiere__resolvedKey = matiereId;
        }
        return matiere;
    }

    public void setMatiere(Matiere matiere) {
        if (matiere == null) {
            throw new DaoException("To-one property 'matiereId' has not-null constraint; cannot set to-one to null");
        }
        this.matiere = matiere;
        matiereId = matiere.getId();
        matiere__resolvedKey = matiereId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
