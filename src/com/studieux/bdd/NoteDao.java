package com.studieux.bdd;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.studieux.bdd.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Value = new Property(2, Float.class, "value", false, "VALUE");
        public final static Property Quotient = new Property(3, Integer.class, "quotient", false, "QUOTIENT");
        public final static Property Coef = new Property(4, Float.class, "coef", false, "COEF");
        public final static Property DevoirId = new Property(5, Long.class, "devoirId", false, "DEVOIR_ID");
        public final static Property MatiereId = new Property(6, Long.class, "matiereId", false, "MATIERE_ID");
    };

    private DaoSession daoSession;

    private Query<Note> matiere_NoteListQuery;

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPTION' TEXT," + // 1: description
                "'VALUE' REAL," + // 2: value
                "'QUOTIENT' INTEGER," + // 3: quotient
                "'COEF' REAL," + // 4: coef
                "'DEVOIR_ID' INTEGER," + // 5: devoirId
                "'MATIERE_ID' INTEGER);"); // 6: matiereId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        Float value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(3, value);
        }
 
        Integer quotient = entity.getQuotient();
        if (quotient != null) {
            stmt.bindLong(4, quotient);
        }
 
        Float coef = entity.getCoef();
        if (coef != null) {
            stmt.bindDouble(5, coef);
        }
 
        Long devoirId = entity.getDevoirId();
        if (devoirId != null) {
            stmt.bindLong(6, devoirId);
        }
 
        Long matiereId = entity.getMatiereId();
        if (matiereId != null) {
            stmt.bindLong(7, matiereId);
        }
    }

    @Override
    protected void attachEntity(Note entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // quotient
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // coef
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // devoirId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // matiereId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setQuotient(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCoef(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setDevoirId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMatiereId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "noteList" to-many relationship of Matiere. */
    public synchronized List<Note> _queryMatiere_NoteList(Long matiereId) {
        if (matiere_NoteListQuery == null) {
            QueryBuilder<Note> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.MatiereId.eq(matiereId));
            matiere_NoteListQuery = queryBuilder.build();
        } else {
            matiere_NoteListQuery.setParameter(0, matiereId);
        }
        return matiere_NoteListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDevoirDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMatiereDao().getAllColumns());
            builder.append(" FROM NOTE T");
            builder.append(" LEFT JOIN DEVOIR T0 ON T.'DEVOIR_ID'=T0.'_id'");
            builder.append(" LEFT JOIN MATIERE T1 ON T.'MATIERE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Note loadCurrentDeep(Cursor cursor, boolean lock) {
        Note entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Devoir devoir = loadCurrentOther(daoSession.getDevoirDao(), cursor, offset);
        entity.setDevoir(devoir);
        offset += daoSession.getDevoirDao().getAllColumns().length;

        Matiere matiere = loadCurrentOther(daoSession.getMatiereDao(), cursor, offset);
        entity.setMatiere(matiere);

        return entity;    
    }

    public Note loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Note> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Note> list = new ArrayList<Note>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Note> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Note> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
